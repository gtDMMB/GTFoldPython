#### GTFoldPythonConfig.py.in : Stub header used to generate platform specific 
####                            configuration and other parameters for the library at build time

from collections import namedtuple
import os

class GTFoldPythonConfig(object):
    
    ## OS / Platform specs to be filled in at build time:
    PLATFORM_DARWIN       = ##__PLATFORM_APPLE_MACOSX__##
    PLATFORM_LINUX        = ##__PLATFORM_LINUX__##
    PLATFORM_OTHER        = ##__PLATFORM_OTHER__##
    PLATFORM_VERSION      = "##__PLATFORM_VERSION_STRING__##"
    PLATFORM_VERSION_FULL = "##__PLATFORM_VERSION_FULL_DETAILS_STRING__##"

    @staticmethod
    def IsPlatformAppleDarwinOSX():
         return GTFoldPythonConfig.PLATFORM_DARWIN
    ##

    @staticmethod
    def IsPlatformLinux():
         return GTFoldPythonConfig.PLATFORM_LINUX
    ##

    @staticmethod
    def GetPlatformByString(fullPlatformDesc = False):
        if fullPlatformDesc:
             return GTFoldPythonConfig.PLATFORM_VERSION_FULL
        return GTFoldPythonConfig.PLATFORM_VERSION
    ##

    ## Thermodynamic parameters types (enum / constants for shorthands):
    THERMO_PARAMS_SPEC_GTFOLD       = "GTFold"
    THERMO_PARAMS_SPEC_RNAFOLD      = "RNAFold"
    THERMO_PARAMS_SPEC_UNAFOLD      = "UNAFold"
    THERMO_PARAMS_SPEC_TURNER04     = "Turner04"
    THERMO_PARAMS_SPEC_RNASTRUCTURE = "RNAStructure"
    THERMO_PARAMS_SPEC_DEFAULT      = "default"
    THERMO_PARAMS_SPEC_TURNER99     = "Turner99"
    THERMO_PARAMS_SPEC_MT09         = "default-MT09"
    THERMO_PARAMS_SPEC_MT99         = "default-MT99"
    THERMO_PARAMS_SPEC_TFMCDANGLES  = "default-TurnerConstrDangles"
    THERMO_PARAMS_SPEC_TFMDANGLES0  = "default-TurnerDangles0"

    THERMO_PARAMS_DEFAULT_BASEDIR   = "##--__GTFOLD_DATADIR_PATH__--##"
    THERMO_PARAMS_BASEDIR           = "##--__GTFOLD_DATADIR_PATH__--##"
    THERMO_PARAMS_SUBDIRS           = dict(
        {
            THERMO_PARAMS_SPEC_GTFOLD       :    "DefaultGTFold", 
            THERMO_PARAMS_SPEC_RNAFOLD      :    "DefaultRNAFold", 
            THERMO_PARAMS_SPEC_UNAFOLD      :    "DefaultUNAFold", 
            THERMO_PARAMS_SPEC_TURNER99     :    "GTFoldTurner99", 
            THERMO_PARAMS_SPEC_TURNER04     :    "GTFoldTurner04", 
            THERMO_PARAMS_SPEC_RNASTRUCTURE :    "RNAstructure-6.0.1",
            THERMO_PARAMS_SPEC_DEFAULT      :    "DefaultGTFold", 
            THERMO_PARAMS_SPEC_MT09         :    "MT09", 
            THERMO_PARAMS_SPEC_MT99         :    "MT99",
            THERMO_PARAMS_SPEC_TFMCDANGLES  :    "TurnerFM363ConstrDangles", 
            THERMO_PARAMS_SPEC_TFMDANGLES0  :    "TurnerFM363Dangles0",
        }
    )

    @staticmethod
    def ResolveThermodynamicParametersDirectory():
        nextTPDataDir = GTFoldPythonConfig.THERMO_PARAMS_DEFAULT_BASEDIR
        if os.path.exists(nextTPDataDir):
            return nextTPDataDir
        nextTPDataDir = os.path.abspath(os.path.join("./Testing/ExtraGTFoldThermoData/")) + "/"
        if not os.path.exists(nextTPDataDir):
            #raise RuntimeError("Having to DEFAULT to GTFOLDDATADIR ... ")
            defaultGTFoldDataDir = os.environ.get('GTFOLDDATADIR')
            if defaultGTFoldDataDir == None or len(defaultGTFoldDataDir) == 0:
                nextTPDataDir = None
            else:
                nextTPDataDir = os.path.abspath(os.path.join(defaultGTFoldDataDir)) + "/"
            if nextTPDataDir == None or not os.path.exists(nextTPDataDir):
                raise RuntimeError("Unable to resolve location of the thermodynamic parameters directory!")
        return nextTPDataDir
    ##

    @staticmethod
    def GetThermodynamicParametersDirectory(specType, resetDir=False):
         if resetDir or GTFoldPythonConfig.THERMO_PARAMS_BASEDIR == "" or \
                 not os.path.exists(GTFoldPythonConfig.THERMO_PARAMS_BASEDIR):
             GTFoldPythonConfig.THERMO_PARAMS_BASEDIR = GTFoldPythonConfig.ResolveThermodynamicParametersDirectory()
         if specType not in GTFoldPythonConfig.THERMO_PARAMS_SUBDIRS:
             raise NotImplementedError
         specSubDir = GTFoldPythonConfig.THERMO_PARAMS_SUBDIRS[specType]
         if GTFoldPythonConfig.THERMO_PARAMS_BASEDIR[-1] != '/':
             GTFoldPythonConfig.THERMO_PARAMS_BASEDIR += '/'
         return GTFoldPythonConfig.THERMO_PARAMS_BASEDIR + specSubDir
    ##

    _ThermoParamsSpecType = namedtuple('ThermoParams', ['name', 'subdir', 'fulldirpath'])

    @staticmethod
    def GetThermodynamicParametersList():
        ThermoParamsType = GTFoldPythonConfig._ThermoParamsSpecType
        thermoParamsList = [ ]
        for (specKey, subDirValue) in GTFoldPythonConfig.THERMO_PARAMS_SUBDIRS:
            fullDirPath = GTFoldPythonConfig.GetThermoDynamicParametersDirectory(specKey)
            tpSpecs = ThermoParamsType(name = specKey, subDir = subDirValue, fulldirpath = fullDirPath)
            thermoParamsList.append(tpSpecs)
        return thermoParamsList
    ##

##

